* Photo hosting
Using [[https://immich.app/][immich.app]] see[[file:immich-app/][immich-app]] for the configuation

- Follow https://immich.app/docs/install/docker-compose to get the [[file:immich-app/original-docker-compose.yml][original-immich docker-compose.yml]]
- Since QNAP Container station does not support multiple files (at least I could not find way to have it)
  I had to inline the [[file:immich-app/.env][.env]] into the docker-compose file.
  A bit of additional massaging gave me the [[file:immich-app/qnap-ready-docker-compose.yml][QNAP-ready config]]
  (note that I redacted out the DB_PASSWORD and POSTGRESS_PASSWORD env variables (3 instances))
  Use password generator to fill those in before deploying.
- Create the folder for the photo library and map the /usr/src/app/upload folder to it in the immich-server configuration.
  In my case it is /share/reddrive-synced/photo/immich
- Create the folder for the database and map to the /var/lib/postgresql/data in the database service config.
  In my case it is /share/Ephemeral/immich-db

In QNAP, open Container Station, and create an application, upload the yml file
modify the name, for example, "immich-photos"
In the advanced settings:
- Activate "Default Web URL Port"
  - Service: immich-server
  - Default web URL port: 2283
- Set the limits for CPU (3) and RAM (2495MB)

It takes QNAP a couple of minutes to start the container.
Once started, it should be accessible over "http://<qnap local ip>:2283"
You you should see "Getting Started" button, but do not create admin credential yet.
The connection is not secured, so let's set up VPN and HTTPS reverse proxy.
* VPN host on a public cloud VM
I use free Oracle Cloud offering.
Open the "Compute" in the cloud.oracle.com admin panel.
Then "instances", "Create instance"
Name, for example, "reverse-proxy-qnap"
In "Image and shape",
select image: "Canonical Ubuntu 22.04"
Shape: the default "VM.Standard.E2.1.Micro" (it should be free)
In "Primary VNIC information"
Select "Create new virtual cloud network" and name it, for example, "reverse-proxy-net"
name the new public subnet "reverse-proxy-subnet"

In the "Primary VNIC IP addresses" "Automatically assign public IPv4 address" should be selected.

In the "Add SSH keys"
select "Upload public key files" and upload the ~/.ssh/....pub file

The rest is by default.

In a few minutes the instance should boot.
I've got public ip address 140.238.216.9
So now I can SSH into it with
#+begin_src
ssh ubuntu@140.238.216.9
#+end_src

Now I can install WireGuard to create VPN.
#+begin_src
sudo apt update
sudo apt upgrade
sudo apt install git wireguard iptables resolvconf qrencode
#+end_src

Creating VPN server:
Using the installer script from
https://github.com/angristan/wireguard-install/

#+begin_src
git clone https://github.com/necto/minimal-cloud
cd minimal-cloud/photo-hosting/vpn
sudo bash wireguard-install.sh
#+end_src
Answer the script's queries.
#+begin_example
IPv4 public address: 140.238.216.9
Public interface: ens3
WireGuard interface name: wg0
Server WireGuard IPv4: 10.66.67.1
Server WireGuard IPv6: fd42:42:42::1
Server WireGuard port [1-65535]: 51820
First DNS resolver to use for the clients: 1.1.1.1
Second DNS resolver to use for the clients (optional): 1.0.0.1
Allowed IPs: 10.66.67.1/24

Client name: qnap
Client WireGuard IPv4: 10.66.67.2
Client WireGuard IPv6: fd42:42:42::2
#+end_example

Then configure port forwarding in Oracle Cloud Network:
- Virtual Cloud Networks
- Select "reverse-proxy-net" -> "reverse-proxy-subnet" -> Defalut security list
- Add Ingress Rules:
  - Source Type: CIDR
  - Source CIDR: 0.0.0.0/0
  - IP Protocoal: UDP (!WireGuard relies on UDP, not TCP)
  - Source Port Range: empty
  - Destination Port Range: 51820
  - Description: "WireGuard listen port"
- Then, for the reverse proxy, let us add two more rules:
  - CIDR; 0.0.0.0/0; TCP; dest port=80
  - CIDR; 0.0.0.0/0; TCP; dest port=443

Print the client configuration:
#+begin_src
cat /home/ubuntu/wg0-client-qnap.conf
#+end_src
Use it to configure client on QNAP NAS, in QVPN Service 3:
- Select VPN Client -> VPN Connection Profiles
- Add -> WireGuard
  - Server name: reverse-proxy
  - Private key: from the printed config
  - IP address: 10.66.67.2
  - Press "Generate Keypairs"
  - Listen Port: empty
  - DNS Server: 1.1.1.1,1.0.0.1
  - Peer Settings/Public key: key from the printed config
  - Peer Settings/Endpoint: public IP of the VM : port (140.238.216.9:51820)
  - Preshaed key: from the printed config
  - Allowed IPs: 10.66.67.1/24

If all works, when you enable the "reverse-proxy" connection both Tx and Rx values should go up.
Additionally running sudo wg should show some traffic from the peer.

Now you can fetch the index.html page from the immich app on the VM:
#+begin_src
wget 10.66.67.2:2283
head index.html
#+end_src
* DNS and Reverse proxy
To obtain a TLS sertificate and enable secure HTTPS access, I need a domain name.
I add just the "A" record for the domain name, as my Oracle instance is not configured for IPv6
(but it could be, if necessary, in which case also configure AAAA).

domain: photo.zaostrovnykh.ch
A: 140.238.216.9
TTL: 1h

I will use [[https://caddyserver.com/][Caddy]] reverse proxy server.
See[[file:caddy/][the configuration]] .
Let's run it in docker:

#+begin_src
sudo apt install docker.io docker-compose-v2
sudo usermod -aG docker $USER
#+end_src

Re-authenticate to get the docker group. Then:
#+begin_src git clone https://github.com/necto/minimal-cloud
cd ~/minimal-cloud/photo-hosting/caddy/
docker volume create caddy_data
docker compose up -d
#+end_src
